@model SAWorkplace.Models.RequestEditModel
@using System.Text.RegularExpressions

<link rel="stylesheet" href="~/css/jquery.datetimepicker.css" />
<link rel="stylesheet" href="~/css/trumbowyg.colors.css" />
<link rel="stylesheet" href="~/css/trumbowyg.min.css" />

<script src="~/js/trumbowyg.min.js"></script>
<script src="~/js/trumbowyg.colors.min.js"></script>
<script src="~/js/trumbowyg.cleanpaste.min.js"></script>
<script src="~/js/trumbowyg.allowtagsfrompaste.min.js"></script>
<script src="~/js/jquery.datetimepicker.js"></script>

<script>
    function setMoveButton() {
        return true;
    }

    $(document).ready(function () {
        $('.ui.dropdown').dropdown();

        var formValidationRules =
        {
            Requests_ProjectName: {
                identifier: 'ProjectName',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'You need to enter a Project Name!'
                    }
                ]
            },
            Requests_Carriers: {
                identifier: 'Carriers',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please choose a Carrier!'
                    }
                ]
            },
            Requests_RequestType: {
                identifier: 'RequestType',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please choose a Request Type!'
                    }
                ]
            },
            dcRequestReviewDate: {
                identifier: 'RequestReviewDate',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please choose a Date to perform your Review by!'
                    }
                ]
            },
            Requests_ProjectorCode: {
                identifier: 'ProjectorCode',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please enter a Projector Code!'
                    },
                    {
                        type: 'regExp',
                        value: /^[P]{1}\d{6}-\d{3}$/,
                        prompt: 'Your Projector Code is invalid, please use a format like P000000-000!'
                    }
                ]
            },
            Requests_Duration1: {
                identifier: 'IssueDuration',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please enter your Duration!'
                    },
                    {
                        type: 'integer[1..100]',
                        prompt: 'Please enter a Duration of 1-100!'
                    }
                ]
            },
            Requests_DurationType1: {
                identifier: 'IssueDurationType',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please enter your Duration!'
                    },
                ]
            },
            Requests_Duration2: {
                identifier: 'Requests_Duration2',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please enter your Duration!'
                    },
                    {
                        type: 'integer[1..100]',
                        prompt: 'Please enter a Duration of 1-100!'
                    }
                ]
            },
            Requests_DurationType2: {
                identifier: 'Requests_DurationType2',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please enter your Duration!'
                    },
                ]
            },
            LoadTestResult: {
                identifier: 'LoadTestResult',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please choose a Load Test to upload!'
                    },
                ]
            },
            Requests_WebServiceURLs: {
                identifier: 'WebServiceURLs',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please identify a URL!'
                    },
                ]
            },
            Requests_TestTime: {
                identifier: 'TestTime',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please identify a time to perform the Load Test!'
                    },
                ]
            },
            Requests_Description: {
                identifier: 'txtDescription',
                rules: [
                    {
                        type: 'empty',
                        prompt: 'Please enter a description of the request!'
                    }
                ]
            }
        }

        $('#frmEditRequest').form({
            fields: formValidationRules,
            inline: true
        });

        $('#txtDescription').trumbowyg({
            btns: [
                ['formatting'],
                ['strong'],
                ['emphasis'],
                ['link'],
                ['insertImage'],
                ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull'],
                ['unorderedList', 'orderedList'],
                ['horizontalRule'],
                ['fullscreen'],
                ['foreColor']
            ]
        });

        var dateToday = new Date();
        dateToday.setDate(dateToday.getDate() + 2);
        $('#dcTestTime').datetimepicker(
            {
                format: 'm/d/Y H:i',
                formatTime: 'H:i',
                minDate: dateToday,
                beforeShowDay: function (date) { return [date.getDay() == 1 || date.getDay() == 2 || date.getDay() == 3 || date.getDay() == 4 || date.getDay() == 5, ""] }
            }
        );

        $('#dcRequestReviewDate').datetimepicker(
            {
                format: 'm/d/Y',
                step: 60,
                timepicker: false,
                minDate: dateToday,
                beforeShowDay: function (date) { return [date.getDay() == 1 || date.getDay() == 2 || date.getDay() == 3 || date.getDay() == 4 || date.getDay() == 5, ""] }
            }
        );

        if (@Model.Requests.RequestType != "") { changeDisplay(@Model.Requests.RequestType,@Model.Requests.RequestStatus) }
    });

    $('#frmEditRequest').submit(function (e) {
            var formData = new FormData(this);
            e.preventDefault();
            $.ajax({
                url: '@Url.Action("EditRequest", "Request")',
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: formData,
                contentType: false,
                processData: false,
                success: function (result) {
                    if (result.success == true) {
                        $('#myEditModal').modal('hide');
                        window.location.reload();
                    }
                },
                error: function (result) {
                    console.log(result.responseText);
                }
            });
            return false;
     });

    @*function DeleteDocument(DocID)
    {
        $.ajax({
            url: '@Url.Action("DeleteDocument", "Document")',
            type: "GET",
            data: { documentID: DocID },
            success: function (result) {
                if (result.success == true) {
                    $('#documents').html(result);
                }
                else if (result.success == false) {
                    alert('fail ' + result.responseText);
                }
            },
            error: function (result) {
                console.log(result.responseText);
            }
        });
    }*@

    function DeleteRequestModal() {
        $('#lblDeleteMessage').text('Are you sure you want to DELETE this request?');
        $('#modEditHide').dimmer('show');
        $('#myDeleteRequestModal').modal({closable: false,transition: 'scale',allowMultiple: true}).modal('show');
    }

    function DeleteRequest() {
        var requestID = @Model.Requests.RequestId;
        $.ajax({
            type: "POST",
            url: '@Url.Action("DeleteRequest", "Request")',
            data: { requestID: requestID },
            success: function (result) {
                $('#myDeleteRequestModal').modal('hide');
                $('#modEditHide').dimmer('hide');
                $('#myEditModal').modal('hide');
                window.location.reload();
            },
            error: function (result) {
                console.log(result.responseText);
            }
        });
    };

    function CloseDeleteRequestModal() {
        $('#modEditHide').dimmer('hide');
        $('#myDeleteRequestModal').modal('hide');
    };

    function changeDisplay(requestType, requestStatus) {
        if (requestType == '1') {
            $('#WebService_CodeReview_Edit').removeClass('hide');
            $('#WebService_CodeReview_Edit').addClass('show');
            $('#WebService_LoadTest_Edit').removeClass('show');
            $('#WebService_LoadTest_Edit').addClass('hide');
            $('#Request_Issue_Edit').removeClass('show');
            $('#Request_Issue_Edit').addClass('hide');
            $('#lblDescription').text('Description of Request');
            $('#myLoadTestContainer').addClass('hide');
            $('#RequestReviewDate_Edit').removeClass('hide');
            $('#RequestReviewDate_Edit').addClass('show');
            $('#dcRequestReviewDate').prop("disabled", false);
            $('#IssueDurationType').prop("disabled", true);
            $('#IssueDuration').prop("disabled", true);
            $('#Requests_DurationType2').prop("disabled", true);
            $('#Requests_Duration2').prop("disabled", true);
            $('#LoadTestResult').prop("disabled", true);
            $('#dcTestTime').prop("disabled", true);
            $('#Requests_WebServiceURLs').prop("disabled", true);
        }
        else if (requestType == '2') {
            $('#WebService_CodeReview_Edit').removeClass('show');
            $('#WebService_CodeReview_Edit').addClass('hide');
            $('#WebService_LoadTest_Edit').removeClass('hide');
            $('#WebService_LoadTest_Edit').addClass('show');
            $('#Request_Issue_Edit').removeClass('show');
            $('#Request_Issue_Edit').addClass('hide');
            $('#lblDescription').text('Description of Request');
            $('#myLoadTestContainer').addClass('show');
            $('#RequestReviewDate_Edit').removeClass('show');
            $('#RequestReviewDate_Edit').addClass('hide');
            $('#dcRequestReviewDate').prop("disabled", true);
            $('#IssueDurationType').prop("disabled", true);
            $('#IssueDuration').prop("disabled", true);
            $('#Requests_DurationType2').prop("disabled", true);
            $('#Requests_Duration2').prop("disabled", true);
            $('#LoadTestResult').prop("disabled", false);
            $('#dcTestTime').prop("disabled", false);
            $('#Requests_WebServiceURLs').prop("disabled", false);
        }
        else if (requestType == '3') {
            $('#WebService_CodeReview_Edit').removeClass('show');
            $('#WebService_CodeReview_Edit').addClass('hide');
            $('#WebService_LoadTest_Edit').addClass('hide');
            $('#WebService_LoadTest_Edit').removeClass('show');
            $('#Request_Issue_Edit').removeClass('hide');
            $('#Request_Issue_Edit').addClass('show');
            $('#lblDescription').text('Description of Request');
            $('#myLoadTestContainer').addClass('hide');
            $('#RequestReviewDate_Edit').removeClass('hide');
            $('#RequestReviewDate_Edit').addClass('show');
            $('#dcRequestReviewDate').prop("disabled", false);
            $('#IssueDurationType').prop("disabled", false);
            $('#IssueDuration').prop("disabled", false);
            $('#Requests_DurationType2').prop("disabled", false);
            $('#Requests_Duration2').prop("disabled", false);
            $('#LoadTestResult').prop("disabled", true);
            $('#dcTestTime').prop("disabled", true);
            $('#Requests_WebServiceURLs').prop("disabled", true);
        }
        else if (requestType == '4') {
            $('#WebService_CodeReview_Edit').removeClass('show');
            $('#WebService_CodeReview_Edit').addClass('hide');
            $('#WebService_LoadTest_Edit').removeClass('show');
            $('#WebService_LoadTest_Edit').addClass('hide');
            $('#Request_Issue_Edit').removeClass('show');
            $('#Request_Issue_Edit').addClass('hide');
            $('#lblDescription').text('Description of Request');
            $('#myLoadTestContainer').addClass('hide');
            $('#RequestReviewDate_Edit').removeClass('hide');
            $('#RequestReviewDate_Edit').addClass('show');
            $('#dcRequestReviewDate').prop("disabled", false);
            $('#IssueDurationType').prop("disabled", true);
            $('#IssueDuration').prop("disabled", true);
            $('#Requests_DurationType2').prop("disabled", true);
            $('#Requests_Duration2').prop("disabled", true);
            $('#LoadTestResult').prop("disabled", true);
            $('#dcTestTime').prop("disabled", true);
            $('#Requests_WebServiceURLs').prop("disabled", true);
        }
        else if (requestType == '5') {
            $('#WebService_CodeReview_Edit').removeClass('show');
            $('#WebService_CodeReview_Edit').addClass('hide');
            $('#WebService_LoadTest_Edit').removeClass('show');
            $('#WebService_LoadTest_Edit').addClass('hide');
            $('#Request_Issue_Edit').removeClass('show');
            $('#Request_Issue_Edit').addClass('hide');
            $('#lblDescription').text('Description of Concern');
            $('#myLoadTestContainer').addClass('hide');
            $('#RequestReviewDate_Edit').removeClass('show');
            $('#RequestReviewDate_Edit').addClass('hide');
            $('#dcRequestReviewDate').prop("disabled", true);
            $('#IssueDurationType').prop("disabled", true);
            $('#IssueDuration').prop("disabled", true);
            $('#Requests_DurationType2').prop("disabled", true);
            $('#Requests_Duration2').prop("disabled", true);
            $('#LoadTestResult').prop("disabled", true);
            $('#dcTestTime').prop("disabled", true);
            $('#Requests_WebServiceURLs').prop("disabled", true);
        }
        else {
            $('#WebService_CodeReview_Edit').removeClass('show');
            $('#WebService_CodeReview_Edit').addClass('hide');
            $('#WebService_LoadTest_Edit').removeClass('show');
            $('#WebService_LoadTest_Edit').addClass('hide');
            $('#Request_Issue_Edit').removeClass('show');
            $('#Request_Issue_Edit').addClass('hide');
            $('#lblDescription').text('Description of Request');
            $('#myLoadTestContainer').addClass('hide');
            $('#RequestReviewDate_Edit').removeClass('show');
            $('#RequestReviewDate_Edit').addClass('hide');
            $('#dcRequestReviewDate').prop("disabled", true);
            $('#IssueDurationType').prop("disabled", true);
            $('#IssueDuration').prop("disabled", true);
            $('#Requests_DurationType2').prop("disabled", true);
            $('#Requests_Duration2').prop("disabled", true);
            $('#LoadTestResult').prop("disabled", true);
            $('#dcTestTime').prop("disabled", true);
            $('#Requests_WebServiceURLs').prop("disabled", true);
        }

        if (requestStatus == 3 || requestStatus == 4 || requestStatus == 10) {
            //disable the screen if closed or complete
            $('#Requests_ProjectName').prop("disabled", true);
            $('#Requests_CarrierId').prop("disabled", true);
            $('#Requests_ProjectorCode').prop("disabled", true);
            $('#dcRequestReviewDate').prop("disabled", true);
            $('#Requests_TFSPath').prop("disabled", true);
            $('#Requests_WebServiceURLs').prop("disabled", true);
            $('#dcTestTime').prop("disabled", true);
            $('#Requests_Duration1').prop("disabled", true);
            $('#Requests_DurationType1').prop("disabled", true);
            $('#Requests_Duration2').prop("disabled", true);
            $('#Requests_DurationType2').prop("disabled", true);
            $('#DeleteButton').removeClass('show');
            $('#DeleteButton').addClass('hide');
            $('#deleteDocButton').addClass('hide');
        }
        else {
            $('#DeleteButton').removeClass('hide');
            $('#DeleteButton').addClass('show');
        }

    }

    $('#frmAddLoadTest').submit(function (e) {
        var formData = new FormData(this);
        $.ajax({
            url: '@Url.Action("AddLoadTest", "LoadTest")',
            type: "POST",
            data: formData,
            contentType: false,
            processData: false,
            success: function (data) {
                $('#myAddLoadTestModal').modal('hide');
                $('#modLoadTestHide').dimmer('hide');
                $('#myLoadTestContainer').html(data);
                $('body').addClass('modal-open');
            },
            error: function (data) {
                console.log("Error: " + data.responseText);
                $('#myAddLoadTestModal').modal('hide');
                $('#myLoadTestContainer').html(data);

            }
        });
        e.preventDefault();
        return false;
        });

    $('#frmAddDocument').submit(function (e) {
            e.preventDefault();

            var formData = new FormData(this);
            $.ajax({
                url: '@Url.Action("AddDocument", "Document")',
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    hideDimmers();
                    $('#myAddDocModal').modal('hide');
                    $('#myDocumentContainer').html(data);
                    setMoveButton(data);
                },
                error: function (data) {
                    console.log("Error: " + data.responseText);
                    $('#myAddDocModal').modal('hide');
                    $('#myDocumentContainer').html(data);
                }
            });
            return false;
    });

    function Delete(documentId, ticketNum, requestType) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("DeleteDocument", "Document")',
            data: { documentID: documentId, ticketNum: ticketNum, requestType: requestType },
            success: function (data) {
                $('#myDocumentContainer').html(data);
                hideDimmers();
                setMoveButton(data);
            }
        })
    }
     
    function DeleteLoadTestModal(interfaceName, loadTestId, ticketNum, CarrierID) {
        $('#txtinterfaceName').val(interfaceName);
        $('#txtTicketNumber').val(ticketNum);
        $('#txtLoadTestID').val(loadTestId);
        $('#txtCarrierID').val(CarrierID);
        $('#lblDeleteLoadTestMessage').text('Are you sure you want to DELETE ' + decodeHtml(interfaceName) + '?');
         $('#modLoadTestHide').dimmer('show');

         $('#myDeleteLoadTestModal').modal({
             closable: false,
             transition: 'scale',
             allowMultiple: true,
             onDeny: function () {
                 console.log('approved for deletion');
                 DeleteLoadTest(loadTestId, ticketNum, CarrierID);
             }
         }).modal('show');
    }

    function CloseDeleteLoadTestModal() {
        $('#myDeleteLoadTestModal').modal('hide');
        $('#modLoadTestHide').dimmer('hide');
    }

</script>

@Html.HiddenFor(model => model.Requests.RequestId)
@Html.HiddenFor(model => model.Requests.RequestDate)
@Html.HiddenFor(model => model.Requests.TicketNumber)
@Html.HiddenFor(model => model.Requests.Requestor)
@Html.HiddenFor(model => model.Requests.RequestorName)
@Html.HiddenFor(model => model.Requests.RequestorEmail)
@Html.HiddenFor(model => model.Requests.AssignedSA)
@Html.HiddenFor(model => model.Requests.AssignedSAEmail)
@Html.HiddenFor(model => model.Requests.AssignedSAName)
@Html.HiddenFor(model => model.Requests.RequestStatus)
@Html.HiddenFor(model => model.Requests.ProgressType)
@Html.HiddenFor(model => model.Requests.CarrierName)

<div id="EditRequestContainer">
    <div class="two fields">
        <div class="eight wide field">
            <label>Project/Request Name</label>
            <div class="ui labeled input">
                <label for="Requests_ProjectName" class="ui ltgray label"><i class="icon archive"></i></label>
                <input type="text" id="@Html.IdFor(model => model.Requests.ProjectName)" name="@Html.NameFor(model => model.Requests.ProjectName)" value="@Html.Raw(Model.Requests.ProjectName)" autocomplete="off" data-validate="ProjectName" />
            </div>
        </div>
        <div class="eight wide field">
            <label>Carrier</label>
            <div class="ui labeled input">
                <label for="Requests_CarrierId" class="ui ltgray label"><i class="icon building"></i></label>
                <select id="@Html.IdFor(model => model.Requests.CarrierId)" name="@Html.NameFor(model => model.Requests.CarrierId)" data-validate="Carriers" class="ui fluid search selection dropdown">
                    <option value=""></option>
                    @{
                        foreach (var carrier in Model.Carriers)
                        {
                            if (Model.Requests.CarrierId == carrier.CarrierId)
                            {
                                <option selected value="@carrier.CarrierId">@carrier.CarrierName</option>
                            }
                            else
                            {
                                <option value="@carrier.CarrierId">@carrier.CarrierName</option>
                            }
                        }
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="two fields">
        <div class="eight wide field disabled">
            <label>Request Type</label>
            <div class="ui labeled input disabled">
                <label for="Requests_RequestType" class="ui ltgray label"><i class="icon sitemap"></i></label>
                <select id="@Html.IdFor(model => model.Requests.RequestType)" name="@Html.NameFor(model => model.Requests.RequestType)" data-validate="RequestType" class="disabled">
                    <option value=""></option>
                    @{
                        foreach (var requestType in Model.RequestTypes)
                        {
                            if (Model.Requests.RequestType == requestType.RequestType)
                            {
                                <option selected value="@requestType.RequestType">@requestType.RequestName</option>
                            }
                        }
                    }
                </select>
            </div>
        </div>
        <div class="eight wide field">
            <label>Projector Code</label>
            <div class="ui labeled input">
                <label for="ProjectorCode" class="ui ltgray label"><i class="icon window restore"></i></label>
                <input type="text" id="@Html.IdFor(model => model.Requests.ProjectorCode)" name="@Html.NameFor(model => model.Requests.ProjectorCode)" value="@Html.Raw(Model.Requests.ProjectorCode)" data-validate="ProjectorCode" autocomplete="off">
            </div>
        </div>
    </div>
</div>
<div id="RequestReviewDate_Edit" class="hide">
    <div class="two fields">
        <div class="eight wide field">
            <label for="Requests_RequestReviewDate">Requested Due Date</label>
            @{
                string Review = Model.Requests.RequestReviewDate.HasValue != false ? (string)Model.Requests.RequestReviewDate.Value.ToString("MM/dd/yyyy") : null;
            }
            <div class="ui labeled input">
                <label for="Requests_RequestReviewDate" class="ui ltgray label"><i class="icon calendar alternate"></i></label>
                <input type="text" id="dcRequestReviewDate" name="@Html.NameFor(model => model.Requests.RequestReviewDate)" class="form-control" value="@Html.Raw(Review)" autocomplete="off" />
            </div>
        </div>

        <div id="Request_Issue_Edit" class="hide eight wide field">
            <div class="field">
                <label>Duration or Effort</label>
                <div class="three fields">
                    <div class="six wide field">
                        <div class="ui labeled input">
                            <label for="Requests_Duration1" class="ui ltgray label"><i class="icon chart line"></i></label>
                            <input type="text" id="IssueDuration" name="@Html.NameFor(model => model.Requests.Duration1)" value="@Html.Raw(Model.Requests.Duration1)" autocomplete="off" data-validate="Duration1" />
                        </div>
                    </div>
                    <div class="two wide field">
                        <small>hour(s) /</small>
                    </div>
                    <div class="eight wide field">
                        <div class="ui labeled input">
                            <label for="Requests_DurationType1" class="ui ltgray label"><i class="icon book"></i></label>
                            <select id="IssueDurationType" name="@Html.NameFor(model => model.Requests.DurationType1)" class="ui fluid selection dropdown" data-validate="DurationType1">
                                <option value=""></option>
                                @{
                                    foreach (var durationType1 in Model.DurationTypes)
                                    {
                                        if (Model.Requests.DurationType1 == durationType1.Value)
                                        {
                                            <option selected value="@durationType1.Value">@durationType1.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@durationType1.Value">@durationType1.Name</option>
                                        }
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="field">
                <label>For</label>
                <div class="three fields">
                    <div class="six wide field">
                        <div class="ui labeled input">
                            <label for="Requests_Duration2" class="ui ltgray label"><i class="icon chart line"></i></label>
                            <input type="text" id="@Html.IdFor(model => model.Requests.Duration2)" name="@Html.NameFor(model => model.Requests.Duration2)" value="@Html.Raw(Model.Requests.Duration2)" data-validate="Duration2" autocomplete="off" />
                        </div>
                    </div>
                    <div class="two wide field">
                        <h5>&nbsp;</h5>
                    </div>
                    <div class="eight wide field">
                        <div class="ui labeled input">
                            <label for="Requests_DurationType2" class="ui ltgray label"><i class="icon book"></i></label>
                            <select id="@Html.IdFor(model => model.Requests.DurationType2)" name="@Html.NameFor(model => model.Requests.DurationType2)" class="ui fluid selection dropdown" data-validate="DurationType2">
                                <option value=""></option>
                                @{
                                    foreach (var durationType2 in Model.DurationTypes)
                                    {
                                        if (Model.Requests.DurationType2 == durationType2.Value)
                                        {
                                            <option selected value="@durationType2.Value">@durationType2.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@durationType2.Value">@durationType2.Name</option>
                                        }
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="fields">
                <div class="sixteen wide field">
                    <div class="ui ignored info attached message">
                        <b>How much of the SA's time will you need?</b> <br />
                        Eg: "1 hour meeting", "2 hours per week for 1 month", etc.
                    </div>
                </div>
            </div>
        </div>
        <div id="WebService_CodeReview_Edit" class="hide eight wide field">
            <label>TFS Path</label>
            <div class="ui labeled input">
                <label for="Requests_TFSPath" class="ui ltgray label"><i class="icon folder open"></i></label>
                @Html.EditorFor(model => model.Requests.TFSPath, new { htmlAttributes = new { autocomplete = "off" } })
            </div>
        </div>
    </div>
</div>
<div id="WebService_LoadTest_Edit" class="hide">
    <div class="two fields">
        <div class="eight wide field">
            <label>Web Service URLs</label>
            <div class="ui labeled input">
                <label for="Requests_WebServiceURLs" class="ui ltgray label"><i class="icon globe"></i></label>
                @Html.EditorFor(model => model.Requests.WebServiceURLs, new { htmlAttributes = new { autocomplete = "off" } })
            </div>
        </div>
        <div class="eight wide field">
            <label>Preferred Test Time</label>
            <div class="ui labeled input">
                <label for="dcTestTime" class="ui ltgray label"><i class="icon clock"></i></label>
                @{
                    string Test = Model.Requests.TestTime.HasValue != false ? (string)Model.Requests.TestTime.Value.ToString("MM/dd/yyyy HH:mm") : null;
                }
                <input type="text" id="dcTestTime" name="@Html.NameFor(model => model.Requests.TestTime)" value="@Html.Raw(Test)" autocomplete="off" />
            </div>
        </div>
    </div>
</div>
<hr />
<div class="fields">
    <div class="sixteen wide field">
        <label for="Requests_RequestDesc" id="lblDescription"><u>Description of Request</u></label>
        <textarea id="@Html.IdFor(model => model.Requests.RequestDesc)" name="@Html.NameFor(model => model.Requests.RequestDesc)" rows="2" autocomplete="off">@Html.Raw(Model.Requests.RequestDesc)</textarea>
    </div>
</div>

<hr />
<div class="fields" id="myLoadTestContainer">
    <div class="sixteen wide field">
        @{
            LoadTestDisplayModel loadtestModel = new LoadTestDisplayModel();
            loadtestModel.TicketNumber = Model.Requests.TicketNumber;
            loadtestModel.LoadTests = Model.LoadTestResults;
            loadtestModel.CarrierID = Model.Requests.CarrierId;
            await Html.RenderPartialAsync("/Views/Partial/LoadTestResults.cshtml", loadtestModel);
        }
    </div>
</div>
<div class="fields">
    <div id="myDocumentContainer" class="sixteen wide field">
        @{
            DocumentDisplayModel documentModel = new DocumentDisplayModel();
            documentModel.Documents = Model.Documents;
            documentModel.TicketNumber = Model.Requests.TicketNumber;
            documentModel.RequestType = Model.Requests.RequestType;
            await Html.RenderPartialAsync("/Views/Partial/Documents.cshtml", documentModel);
        }
    </div>
</div>
<hr />
<div class="two fields">
    <div class="eight wide field">
        <label id="lblDescription"><u>Comments</u></label>
        <table width="100%" border="0">
            @{
                foreach (var comment in Model.History)
                {
                    <tr>
                        <td class="info-text"><b><font color="blue">@comment.AddedBy</font></b>: @Html.Raw(comment.History) - <span style="font-size:xx-small !important">@comment.AddDateTime</span></td>
                    </tr>
                }
            }
        </table>
    </div>
    <div class="eight wide field">
        <div class="ui labeled input">
            <label for="newComment" class="ui ltgray label"><i class="icon comment alternate"></i></label>
            <textarea id="newComment" name="newComment" placeholder="Add Comment" width="100%" spellcheck="true" style="max-width:500px" cols="2" rows="3"></textarea>
        </div>
    </div>
</div>
@{
    StatusModel status = Model.Status.Where(x => x.ID.Equals(Model.Requests.RequestStatus)).FirstOrDefault();
    var assignedSA = Model.Requests.AssignedSAName;
    if (assignedSA != "")
    {
        <hr />
        <div class="fields">
            <div class="eight wide field">
                <label class="col-form-label-sm" style="padding:5px; padding-left:10px !important"><b>Assigned SA: </b><font color="blue">@assignedSA</font></label>
            </div>
            <div class="eight wide field">
                <label class="col-form-label-sm" style="padding:5px; padding-left:10px !important"><b>Status: </b><font color="blue">@status.Text</font></label>
            </div>
        </div>
    }
}
<hr />

<div class="ui small modal" id="myDeleteRequestModal" aria-labelledby="myDeleteRequestModal" aria-hidden="true" style="z-index:2500;">
    <div class="header inverted" style="background-color:black">
        <div class="ui grid">
            <div class="ui fifteen wide column"><h3 id="modalTitle" style="color:white">Delete Request</h3></div>
            <div class="ui one wide column right aligned" style="cursor:pointer"><i onclick="CloseDeleteRequestModal();" class="close small icon" style="color:white !important"></i></div>
        </div>
    </div>
    <div class="content">
        <p style="margin:10px 10px 10px 10px"><label id="lblDeleteMessage" style="color:red;"></label></p>
    </div>
    <div class="actions">
        <button type="button" class="ui basic button" onclick="CloseDeleteRequestModal();">Cancel</button>
        <button type="button" class="ui negative basic button" onclick="DeleteRequest();">Delete Request</button>
    </div>
</div>

<div class="ui small modal" id="myDeleteModal" aria-labelledby="myDeleteModal" aria-hidden="true">
    <div class="header inverted" style="background-color:black">
        <div class="ui grid">
            <div class="ui fifteen wide column"><h3 id="modalTitle" style="color:white">Delete Document</h3></div>
        </div>
    </div>
    <div class="content">
        <p style="margin:10px 10px 20px 10px"><label id="lblMessage" style="color:red;"></label></p>
    </div>
    <div class="actions">
        <button type="button" class="ui basic button close" onclick="CloseDeleteModal()">Cancel</button>
        <button type="button" class="ui basic button deny negative">Delete Document!</button>
    </div>
</div>

<div class="ui small modal" id="myAddDocModal" aria-labelledby="myAddDocModal" aria-hidden="true">
    <div class="header inverted" style="background-color:black">
        <h3 id="modalTitle" style="color:white">Add Document</h3>
    </div>
    <div class="content">
        <form asp-action="AddDocument" asp-controller="Document" method="POST" class="ui small form" id="frmAddDocument">
            <div class="modal-body" id="PreviewAddDoc">
                PartialView
            </div>
        </form>
    </div>
    <div class="actions">
        <button type="button" class="ui basic button close" onclick="CloseAddModal()">Cancel</button>
        <button type="button" class="ui basic button approved positive">Add Document!</button>
    </div>
</div>

<div class="ui small modal" id="myAddLoadTestModal" aria-labelledby="myAddLoadTestModal">
    <div class="header inverted" style="background-color:black">
        <h3 id="modalTitle" style="color:white">Add  Load Test Result</h3>
    </div>
    <div class="content">
        <form asp-action="AddLoadTest" asp-controller="LoadTest" class="ui small form" method="POST" data-ajax="true" data-ajax-update="myAddLoadTestModal" id="frmAddLoadTest" data-ajax-mode="replace">
            <div class="modal-body" id="PreviewAddLoadTest">
                @*PartialView*@
            </div>
        </form>
    </div>
    <div class="actions">
        <button type="button" class="ui basic button deny">Cancel</button>
        <button type="button" class="ui basic button approved positive">Add Load Test Result!</button>
    </div>
</div>

<div class="ui small modal" aria-labelledby="myDeleteLoadTestModal" id="myDeleteLoadTestModal">
    <div class="header inverted" style="background-color:black">
        <div class="ui grid">
            <div class="ui fifteen wide column"><h3 id="modalAddTitle" style="color:white">Delete Load Test</h3></div>
        </div>
    </div>
    <div class="content">
        <p style="margin:10px 10px 10px 10px"><label id="lblDeleteLoadTestMessage" style="color:red;"></label></p>
        <input type="hidden" id="txtLoadTestID" />
        <input type="hidden" id="txtTicketNumber" />
        <input type="hidden" id="txtinterfaceName" />
        <input type="hidden" id="txtCarroerID" />
    </div>
    <div class="actions">
        <button type="button" class="ui basic button close" onclick="CloseDeleteLoadTestModal()">Cancel</button>
        <button type="button" class="ui basic button negative deny">Delete Load Test!</button>
    </div>
</div>