@model SAWorkplace.Models.RequestEditModel
@using System.Text.RegularExpressions

<script>
    $(document).ready(function () {

         var SA = '@Model.Requests.AssignedSA';

        $('#SADropDown').dropdown({
            onChange: function (text, value) {
                var SAName = $('#Requests_AssignedSAName');
                var SAEmail = $('#Requests_AssignedSAEmail');

                if (text == 'jgirard') {
                    SAName.val('Jim Girard');
                    SAEmail.val('jgirard@ipipeline.com');
                }
                else if (text == 'mcain') {
                    SAName.val('Matt Cain');
                    SAEmail.val('mcain@ipipeline.com');
                }
                else if (text == 'dolsen') {
                    SAName.val('Darnae Olsen');
                    SAEmail.val('dolsen@ipipeline.com');
                }
                else if (text == 'bbowman') {
                    SAName.val('Bryan Bowman');
                    SAEmail.val('bbowman@ipipeline.com');
                }
                else if (text == 'bmosko') {
                    SAName.val('Ben Mosko');
                    SAEmail.val('bmosko@ipipeline.com');
                }
                else if (text == 'bstaboleski') {
                    SAName.val('Brian Staboleski');
                    SAEmail.val('bstaboleski@ipipeline.com');
                }
                else if (text == 'btanoyo') {
                    SAName.val('Benny Tanoyo');
                    SAEmail.val('btanoyo@ipipeline.com');
                }
                else if (text == 'EIannacone') {
                    SAName.val('Eric EIannacone');
                    SAEmail.val('EIannacone@ipipeline.com');
                }
                else if (text == 'fzohora') {
                    SAName.val('Fatema Zohora');
                    SAEmail.val('fzohora@ipipeline.com');
                }
                else if (text == 'jmathews') {
                    SAName.val('Jensen Mathews');
                    SAEmail.val('jmathews@ipipeline.com');
                }
                else if (text == 'kasistido') {
                    SAName.val('Kayla Asistido');
                    SAEmail.val('kasistido@ipipeline.com');
                }
                else if (text == 'rajad') {
                    SAName.val('Raja Devabhakthuni');
                    SAEmail.val('rajad@ipipeline.com');
                }
                if ((text != '') && ($('#Requests_RequestStatus').val() == 1)) {
                    $('#Requests_RequestStatus').dropdown('set selected', '2');
                }
            }
        }).dropdown('set selected', SA);

        $('#Requests_RequestType').dropdown({
            onChange: function (value, text) {
                var SAName = $('#Requests_AssignedSAName');
                var SAEmail = $('#Requests_AssignedSAEmail');
                var Request_Status = $('#Requests_RequestStatus');
               
                if (value > 99) {
                    SAName.val('');
                    SAEmail.val('');
                    Request_Status.dropdown('set selected', '1');
                    $('#SADropDown').dropdown('clear');
                }
            }
        });
        $('#Requests_RequestStatus').dropdown();

        //filter the status list
        $("#Requests_RequestStatus option[value='5']").remove(); //feasibility
        $("#Requests_RequestStatus option[value='6']").remove(); //initiation
        $("#Requests_RequestStatus option[value='7']").remove(); //implementation
        $("#Requests_RequestStatus option[value='9']").remove(); //fail
        $("#Requests_RequestStatus option[value='10']").remove(); //pass
        $("#Requests_RequestStatus option[value='12']").remove(); //addendum
        $("#Requests_RequestStatus option[value='17']").remove(); //Post Initial Build

    });

    function setMoveButton() {
        return false;
    }

    $('#frmUpdateIssueReview').submit(function (e) {
        var formData = new FormData(this);

        $.ajax({
            url: '@Url.Action("IssueReview", "SARequest")',
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {
                if (result.success == true) {
                    $('#myIssueReviewModal').modal('hide');
                    window.location.reload();
                }
            },
            error: function (result) {
                console.log(result.responseText);
            }
        });
        e.preventDefault();
    });

    $('#frmAddDocument').submit(function (e) {
            e.preventDefault();

            var formData = new FormData(this);
            $.ajax({
                url: '@Url.Action("AddDocument", "Document")',
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    hideDimmers();
                    $('#myAddDocModal').modal('hide');
                    $('#myDocumentContainer').html(data);
                    setMoveButton(data);
                },
                error: function (data) {
                    console.log("Error: " + data.responseText);
                    $('#myAddDocModal').modal('hide');
                    $('#myDocumentContainer').html(data);
                }
            });
            return false;
    });

    function Delete(documentId, ticketNum, requestType) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("DeleteDocument", "Document")',
            data: { documentID: documentId, ticketNum: ticketNum, requestType: requestType },
            success: function (data) {
                $('#myDocumentContainer').html(data);
                hideDimmers();
                setMoveButton(data);
            }
        })
    }

</script>
@{ 
    string assignedType = "SA";

    if (Model.Requests.RequestType > 99)
    {
        <script>
            document.getElementById('modalProjectIssueTitle').innerHTML = "SME Request";
        </script>
        assignedType = "SME";
    }
}

@Html.HiddenFor(model => model.Requests.RequestId)
@Html.HiddenFor(model => model.Requests.RequestDate)
@Html.HiddenFor(model => model.Requests.TicketNumber)
@Html.HiddenFor(model => model.Requests.CarrierId)
@Html.HiddenFor(model => model.Requests.CarrierName)
@Html.HiddenFor(model => model.Requests.ProjectName)
@Html.HiddenFor(model => model.Requests.ProjectorCode)
@Html.HiddenFor(model => model.Requests.TFSPath)
@Html.HiddenFor(model => model.Requests.RequestorName)
@Html.HiddenFor(model => model.Requests.RequestorEmail)
@Html.HiddenFor(model => model.Requests.ProgressType)
@Html.HiddenFor(model => model.Requests.RequestDesc)
@Html.HiddenFor(model => model.Requests.RequestReviewDate)
@Html.HiddenFor(model => model.Requests.Requestor)
@Html.HiddenFor(model => model.Requests.Duration1)
@Html.HiddenFor(model => model.Requests.Duration2)
@Html.HiddenFor(model => model.Requests.DurationType1)
@Html.HiddenFor(model => model.Requests.DurationType2)

<div id="UpdateIssueReviewContainer" style="margin: 5px 5px 5px 5px">
    <div class="fields">
        <div class="sixteen wide field">
            @Model.Requests.ProjectName - <b>@Model.Requests.CarrierName</b>
        </div>
    </div>
    <div class="two fields">
        <div class="eight wide field">
            <div>
                <b>Projector Code: </b>@Model.Requests.ProjectorCode
            </div>
            <br />
            <div>
                <b>Requested on: </b>@Model.Requests.RequestDate
            </div>
            <br />
            <div>
                @{
                    string Issue = Model.Requests.RequestReviewDate.HasValue != false ? (string)Model.Requests.RequestReviewDate.Value.ToString("MM/dd/yyyy") : null;
                }   <b>Review by Date: </b>@Html.Raw(Issue)
            </div>
            <br />
            <div>
                <b>Duration/Effort: </b>@Model.Requests.Duration1 hour(s) / @Model.Requests.DurationType1 For @Model.Requests.Duration2 @Model.Requests.DurationType2
            </div>
            <br />
            <div>
                <b>Submitted By: </b>@Model.Requests.RequestorName
            </div>
        </div>
        <div class="eight wide field">
            <label id="lblComment"><u>Comments</u></label>
            <table width="100%" border="0">
                @{
                    foreach (var comment in Model.History)
                    {
                        <tr>
                            <td class="info-text"><b><font color="blue">@comment.AddedBy</font></b>: @Html.Raw(comment.History) - <span style="font-size:xx-small !important">@comment.AddDateTime</span></td>
                        </tr>
                    }
                }
            </table>

            <div class="ui labeled input">
                <label for="newComment" class="ui ltgray label"><i class="icon comment alternate"></i></label>
                <textarea id="newComment" name="newComment" placeholder="Add Comment" width="100%" spellcheck="true" style="max-width:500px" cols="2" rows="3"></textarea>
            </div>
        </div>
    </div>
    <hr />
    <div class="two fields">
        <div class="eight wide field">
            <label for="Requests_AssignedSA">Assigned @assignedType</label>
            <div class="ui labeled input">
                <label for="Requests_StatusType" class="ui ltgray label"><i class="icon user md"></i></label>
                <div class="ui fluid selection dropdown" id="SADropDown" style="width:80%">
                    <input type="hidden" name="@Html.NameFor(x => x.Requests.AssignedSA)" id="@Html.IdFor(x => x.Requests.AssignedSA)">
                    <i class="dropdown icon"></i>
                    <div class="default text">--Assign to @assignedType--</div>
                    <div class="menu">
                        @{
                            if (Model.Requests.RequestType < 99)
                            {
                                <div class="item" data-value="mcain">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Matt Cain
                                </div>
                                <div class="item" data-value="jgirard">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Jim Girard
                                </div>
                                <div class="item" data-value="dolsen">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Darnae Olsen
                                </div>
                            }
                            else
                            {
                                <div class="item" data-value="bbowman">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Bryan Bowman
                                </div>
                                <div class="item" data-value="bmosko">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Ben Mosko
                                </div>
                                <div class="item" data-value="bstaboleski">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Brian Staboleski
                                </div>
                                <div class="item" data-value="btanoyo">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Benny Tanoyo
                                </div>
                                 <div class="item" data-value="EIannacone">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Eric Iannacone
                                </div>
                                <div class="item" data-value="fzohora">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Fatema Zohora
                                </div>
                                <div class="item" data-value="jmathews">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Jensen Mathews
                                </div>
                                <div class="item" data-value="kasistido">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Kayla Asistido
                                </div>
                                <div class="item" data-value="rajad">
                                    <img class="ui mini avatar image" src="/img/PersonPlaceholder_sm.png">
                                    Raja Devabhakthuni
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
            @Html.HiddenFor(model => model.Requests.AssignedSAEmail)
            @Html.HiddenFor(model => model.Requests.AssignedSAName)

            <br /><br />
            <label for="Requests_RequestType">Request Type</label>
            <div class="ui labeled input" style="width:90% !important">
                <label for="Requests_RequestType" class="ui ltgray label"><i class="icon sitemap"></i></label>
                @Html.DropDownListFor(model => model.Requests.RequestType, new SelectList(Model.RequestTypes, "RequestType", "RequestName"), "--Choose Request Type--", new { @class = "ui fluid selection dropdown", autocomplete = "off", required = "required" })
            </div>
        </div>
        <div class="eight wide field">
            <label>Request Status</label>
            <div class="ui labeled input">
                <label for="Requests_StatusType" class="ui ltgray label"><i class="icon industry"></i></label>
                @Html.DropDownListFor(model => model.Requests.RequestStatus, new SelectList(Model.Status, "ID", "Text"), "--Choose Status--", new { @class = "ui fluid selection dropdown", autocomplete = "off" })
            </div>
        </div>
    </div>
    <hr />
    <div class="sixteen wide field">
        <label for="Requests_RequestDesc" id="lblDescription"><u>Description of Request</u></label>
        <br />
        <div class="info-text">@Html.Raw(Model.Requests.RequestDesc)</div>
    </div>
    <hr />
    <div class="sixteen wide field" id="myDocumentContainer">
        @{
            DocumentDisplayModel documentModel = new DocumentDisplayModel();
            documentModel.Documents = Model.Documents;
            documentModel.TicketNumber = Model.Requests.TicketNumber;
            documentModel.RequestType = Model.Requests.RequestType;
            await Html.RenderPartialAsync("/Views/Partial/Documents.cshtml", documentModel);
        }
    </div>
</div>

<div class="ui small modal" id="myDeleteModal" aria-labelledby="myDeleteModal" aria-hidden="true">
    <div class="header inverted" style="background-color:black">
        <div class="ui grid">
            <div class="ui fifteen wide column"><h3 id="modalTitle" style="color:white">Delete Document</h3></div>
        </div>
    </div>
    <div class="content">
        <p style="margin:10px 10px 20px 10px"><label id="lblMessage" style="color:red;"></label></p>
    </div>
    <div class="actions">
        <button type="button" class="ui basic button close" onclick="CloseDeleteModal()">Cancel</button>
        <button type="button" class="ui basic button deny negative">Delete Document!</button>
    </div>
</div>

<div class="ui small modal" id="myAddDocModal" aria-labelledby="myAddDocModal" aria-hidden="true">
    <div class="header inverted" style="background-color:black">
        <h3 id="modalTitle" style="color:white">Add Document</h3>
    </div>
    <div class="content">
        <form asp-action="AddDocument" asp-controller="Document" method="POST" class="ui small form" id="frmAddDocument">
            <div class="modal-body" id="PreviewAddDoc">
                PartialView
            </div>
        </form>
    </div>
    <div class="actions">
        <button type="button" class="ui basic button close" onclick="CloseAddModal()">Cancel</button>
        <button type="button" class="ui basic button approved positive">Add Document!</button>
    </div>
</div>