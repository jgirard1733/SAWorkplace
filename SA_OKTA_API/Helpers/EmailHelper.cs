using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using SAWorkplace.Models;
using SAWorkplace.Data;
using System.Web;
using Microsoft.Extensions.Configuration;
using LoggerService;
using MailKit.Net.Smtp;
using MimeKit;

namespace SA_OKTA_API.Helpers
{
    public class EmailHelper
    {
        protected ApplicationDBContext aContext;
        private readonly IConfiguration _config;
        protected bool emailFlag = true;
        private static ILoggerManager _logger;
        public EmailHelper(IConfiguration configuration, ILoggerManager logger)
        {
            _config = configuration;
            _logger = logger;
            try { emailFlag = Convert.ToBoolean(_config["EmailSettings:SendEmails"]); } catch { }
            //_logger.LogDebug("EmailHelper: emailFlag = " + emailFlag.ToString());
        }
        public async void sendEmails(string details)
        {
            if (!emailFlag) return;

            try
            {
                var mail = new MimeMessage();
                mail.To.Add(new MailboxAddress("Matt Cain", "mcain@ipipeline.com"));
                mail.From.Add(new MailboxAddress("~PS Architects", "psarchitects@ipipeline.com"));
                mail.Subject = "Update User Failed for SA Workplace";
                string bodyRequest = "<p><h3>Update User Failed</h3></p>";
                
                bodyRequest += "<p><b>Details: </b></p>";
                
                bodyRequest += $"<p>{details}</p>";
                //footer
                bodyRequest += "<hr><p>* <i>This email has been generated by SA OKTA API</i></p>";
                mail.Body = new TextPart("html")
                {
                    Text = bodyRequest
                };

                string server = _config["EmailSettings:SmtpServer"];
                int port = 587;
                Int32.TryParse(_config["EmailSettings:SmtpPort"], out port);

                using (var client = new SmtpClient())
                {
                    try
                    {
                        // For demo-purposes, accept all SSL certificates (in case the server supports STARTTLS)
                        client.ServerCertificateValidationCallback = (s, c, h, e) => true;

                        client.Connect(server, port, false);

                        // Note: only needed if the SMTP server requires authentication
                        //client.Authenticate("user", "password");

                        client.Send(mail);
                    }
                    catch (Exception ex) {
                        _logger.LogError(ex, "Mail Exception: " + ex.Message + ": " + ex.InnerException);
                    }
                    finally {
                        client.Disconnect(true);
                    }
                }
            }
            catch (Exception mailExp)
            {
                _logger.LogError(mailExp, "EMailHelper - Exception: " + mailExp.Message + ": " + mailExp.InnerException);
            }
        }

    }
}